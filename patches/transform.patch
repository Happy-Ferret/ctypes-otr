diff --git a/chat/components/public/prplIConversation.idl b/chat/components/public/prplIConversation.idl
--- a/chat/components/public/prplIConversation.idl
+++ b/chat/components/public/prplIConversation.idl
@@ -6,16 +6,41 @@
 #include "nsISupports.idl"
 #include "nsISimpleEnumerator.idl"
 #include "nsIObserver.idl"
 
 interface imIAccountBuddy;
 interface imIAccount;
 interface nsIURI;
 interface nsIDOMDocument;
+interface prplIConversation;
+
+/* A tMsg interface */
+[scriptable, uuid(b62563d6-c8ff-11e3-b0b0-42251e5d46b0)]
+interface tMessage : nsISupports {
+  attribute AUTF8String toSend;
+  attribute AUTF8String toDisplay;
+};
+
+/* A generic callback */
+[scriptable, function, uuid(fe7d8cdc-c8e4-11e3-bdf4-1c101e5d46b0)]
+interface callback : nsISupports {
+  void invoke([optional] in AUTF8String aMsg);
+};
+
+/* A transform */
+[scriptable, uuid(a7eb9e1A-6bcf-4668-986f-a59822ed3e19)]
+interface transform : nsISupports {
+  void onSend([optional] in tMessage tMsg,
+              [optional] in prplIConversation aConv,
+              [optional] in callback aCb);
+  void onReceive([optional] in tMessage tMsg,
+                 [optional] in prplIConversation aConv,
+                 [optional] in callback aCb);
+};
 
 /*
  * This is the XPCOM purple conversation component, a proxy for PurpleConversation.
  */
 
 [scriptable, uuid(e40dc3e5-c9ff-457b-a6cc-655cce81042c)]
 interface prplIConversation: nsISupports {
 
@@ -39,16 +64,21 @@ interface prplIConversation: nsISupports
   readonly attribute PRTime startDate;
   /* Unique identifier of the conversation */
   /* Setable only once by purpleCoreService while calling addConversation. */
            attribute unsigned long id;
 
   /* Send a message in the conversation */
   void sendMsg(in AUTF8String aMsg);
 
+  /* Transform a message */
+  void transformMsg(in AUTF8String aMsg, in boolean isSending, in callback aCb);
+  void addTransform(in transform aTransform);
+  void removeTransform(in transform aTransform);
+
   /* Send information about the current typing state to the server.
      aString should contain the content currently in the text field. The
      protocol should return the number of characters that can still be typed. */
   long sendTyping(in AUTF8String aString);
   const long NO_TYPING_LIMIT = 2147483647; // max int = 2 ^ 31 - 1
 
   /* Un-initialize the conversation. Will be called by
      purpleCoreService::RemoveConversation when the conversation is
diff --git a/chat/components/src/imConversations.js b/chat/components/src/imConversations.js
--- a/chat/components/src/imConversations.js
+++ b/chat/components/src/imConversations.js
@@ -282,17 +282,19 @@ UIConversation.prototype = {
 
   // prplIConversation
   get isChat() this.target.isChat,
   get account() this.target.account,
   get name() this.target.name,
   get normalizedName() this.target.normalizedName,
   get title() this.target.title,
   get startDate() this.target.startDate,
-  sendMsg: function (aMsg) { this.target.sendMsg(aMsg); },
+  sendMsg: function (aMsg) {
+    this.target.transformMsg(aMsg, true, (aMsg) => this.target.sendMsg(aMsg));
+  },
   unInit: function() {
     for each (let conv in this._prplConv)
       gConversationsService.forgetConversation(conv);
     if (this._observedContact) {
       this._observedContact.removeObserver(this);
       delete this._observedContact;
     }
     this._prplConv = {}; // Prevent .close from failing.
diff --git a/chat/modules/jsProtoHelper.jsm b/chat/modules/jsProtoHelper.jsm
--- a/chat/modules/jsProtoHelper.jsm
+++ b/chat/modules/jsProtoHelper.jsm
@@ -438,16 +438,18 @@ const GenericConversationPrototype = {
   get LOG() this._account.LOG,
   get WARN() this._account.WARN,
   get ERROR() this._account.ERROR,
 
   _init: function(aAccount, aName) {
     this._account = aAccount;
     this._name = aName;
     this._observers = [];
+    this._transforms = [];
+    this._msgBuffer = [];
     this._date = new Date() * 1000;
     Services.conversations.addConversation(this);
   },
 
   _id: 0,
   get id() this._id,
   set id(aId) {
     if (this._id)
@@ -472,27 +474,77 @@ const GenericConversationPrototype = {
     }
   },
 
   sendMsg: function (aMsg) {
     throw Cr.NS_ERROR_NOT_IMPLEMENTED;
   },
   sendTyping: function(aString) Ci.prplIConversation.NO_TYPING_LIMIT,
 
+  addTransform: function(aTransform) {
+    if (this._transforms.indexOf(aTransform) == -1)
+      this._transforms.push(aTransform);
+  },
+  removeTransform: function(aTransform) {
+    this._transforms = this._transforms.filter(function (o) o !== aTransform);
+  },
+  transformMsg: function(aMsg, isSending, aCb) {
+    let tMsg = { toSend: aMsg, toDisplay: aMsg };
+    let method = isSending ? "onSend" : "onReceive";
+    let transforms = this._transforms.slice(0);
+    if (!isSending)
+      transforms.reverse();
+    (function cb(i) {
+      if (i < transforms.length) {
+        transforms[i][method](tMsg, this, cb.bind(this, i+1));
+        return;
+      }
+      if (isSending)
+        this.bufferMsg(tMsg);
+      aCb.invoke(tMsg.toSend);
+    }).call(this, 0);
+  },
+  bufferMsg: function(tMsg) {
+    if (this._msgBuffer.indexOf(tMsg) == -1)
+      this._msgBuffer.push(tMsg);
+  },
+  popMsg: function(aText, aCb) {
+    for (let i = 0; i < this._msgBuffer.length; i++)
+      if (this._msgBuffer[i].toSend === aText) {
+        aCb(this._msgBuffer.splice(i, 1)[0].toDisplay);
+        return;
+      }
+  },
+
   close: function() {
     Services.obs.notifyObservers(this, "closing-conversation", null);
     Services.conversations.removeConversation(this);
   },
   unInit: function() {
     delete this._account;
     delete this._observers;
+    delete this._transforms;
+    delete this._msgBuffer;
   },
 
   writeMessage: function(aWho, aText, aProperties) {
-    (new Message(aWho, aText, aProperties)).conversation = this;
+    let addConv = (function(tText) {
+      if (tText) // drop empty messages
+        (new Message(aWho, tText, aProperties)).conversation = this;
+    }).bind(this);
+    if (!aProperties.system) {
+      if (aProperties.outgoing) {
+        this.popMsg(aText, addConv);
+        return;
+      } else if (aProperties.incoming) {
+        this.transformMsg(aText, false, { invoke: addConv });
+        return;
+      }
+    }
+    addConv(aText);
   },
 
   get account() this._account.imAccount,
   get name() this._name,
   get normalizedName() this._account.normalize(this.name),
   get title() this.name,
   get startDate() this._date
 };
diff --git a/im/config/mozconfigs/macosx/mozconfig b/im/config/mozconfigs/macosx/mozconfig
--- a/im/config/mozconfigs/macosx/mozconfig
+++ b/im/config/mozconfigs/macosx/mozconfig
@@ -17,17 +17,17 @@ export CXXFLAGS="-gdwarf-2 -W -Wno-unuse
 # For NSS symbols
 export MOZ_DEBUG_SYMBOLS=1
 ac_add_options --enable-debug-symbols="-gdwarf-2"
 
 # Enable parallel compiling
 mk_add_options MOZ_MAKE_FLAGS="-sj10"
 
 ac_add_options --enable-application=im
-ac_add_options --enable-extensions=purple
+#ac_add_options --enable-extensions=purple
 ac_add_options --enable-update-channel=nightly
 ac_add_options --enable-update-packaging
 ac_add_options --enable-optimize
 ac_add_options --disable-debug
 
 if [ `date +%m%d` = 1031 -o `date +%m%d` = 1101 ]; then
 ac_add_options --with-branding=instantbird/branding/halloween
 fi
